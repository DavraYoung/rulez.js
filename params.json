{"name":"Rulez.js","tagline":"Rulez.js is a javascript library for showing svg customizable rulers.","body":"#Rulez.js\r\n\r\nRulez.js is a javascript library for showing svg based customizable rulers. \r\n\r\n##Bower package\r\n\r\n````sh\r\nbower install rulez.js\r\n````\r\n\r\n##Usage\r\n\r\n###Necessary files\r\n\r\nDownload the [minified library](https://raw.githubusercontent.com/ShyykoSerhiy/rulez.js/master/dist/js/rulez.min.js) and include it in your html. Alternatively use bower to install it.\r\n````html\r\n<script type=\"text/javascript\" src=\"bower_components/rulez.js/dist/js/rulez.min.js\"></script>\r\n````\r\n\r\n###Basic usage\r\n\r\nHorizontal ruler \r\n````js\r\nvar someSvgElement = document.getElementById('someSvgElementId');\r\nvar rulez = new Rulez({\r\n    element: someSvgElement,\r\n});\r\nrulez.render();\r\n````\r\nVertical ruler\r\n````js\r\nvar someSvgElement = document.getElementById('someSvgElementId');\r\nvar rulez = new Rulez({\r\n    element: someSvgElement,\r\n    layout: 'vertical'\r\n});\r\nrulez.render();\r\n````\r\n###Customizing rulers\r\nInternally rulez.js use default config, but you can override it by passing more parameters in constructor.\r\nThere is only one limitation to remember : all maximum pixelGap used for divisions must be dividable by all other \r\npixelGaps used (pixelGaps of texts are included also).  \r\n\r\n####Customizing divisions\r\nDivisions can be changed by providing array of divisions config objects\r\n````js\r\nvar rulez = new Rulez({\r\n    ...\r\n    divisions: [\r\n        {\r\n            pixelGap: 25,\r\n            lineLength: 10\r\n        },\r\n        {\r\n            pixelGap: 100,\r\n            lineLength: 20\r\n        }\r\n    ]\r\n});\r\n````\r\nThe code above means, that will be created with two different division types:\r\n 1. Long ones(20px) with big gap between them(100px).\r\n 2. Short ones(10px) with small gap between them(25px)\r\n\r\nOther parameters that can be changed are \r\n````js\r\n    strokeWidth : 1,// width of division\r\n    className: 'someClassName',// css class applied to every division\r\n    type: 'rect'// 'rect' or 'line': type of svg element used to render division\r\n````\r\n  \r\n####Customizing texts\r\n\r\nTexts can be changed by providing array of texts config objects\r\n````js\r\nvar rulez = new Rulez({\r\n    ...\r\n    texts: [\r\n        {\r\n            pixelGap: 50\r\n        },\r\n        {\r\n            pixelGap: 100\r\n        }\r\n    ]\r\n});\r\n````\r\n\r\nThe code above means, that will be created with two different texts types:\r\n 1. Texts with big gap between them(100px).\r\n 2. Texts with smaller gap between them(50px)\r\n\r\nOther parameters that can be changed are \r\n````js\r\n    className: 'someClassName'// css class applied to every text\r\n    offset: 20,//offsets of texts in pixels\r\n    rotation:90//rotation in degrees of texts\r\n````  \r\n\r\n####Default configs\r\nIt's possible to use default configs that will used for all texts and divisions if they not specify parameters on their own. Any parameters that can be used for divisions or texts are also applicable for default configs.\r\n````js\r\ndivisionDefaults: {\r\n    strokeWidth: 1,\r\n    type: 'rect',\r\n    className: 'rulez-rect'\r\n},\r\ntextDefaults: {\r\n    rotation: 0,\r\n    offset: 25,\r\n    className: 'rulez-text'\r\n}\r\n````\r\n\r\n###Scrolling rullers to a specific position\r\nEvery ruller can be scrolled to a speciffig postion using\r\n````js\r\nruler.scrollTo(<left (top for vertical rulers) position in pixels>);\r\n/* example */\r\nruler.scrollTo(100);\r\n````\r\n\r\n[MIT License](http://opensource.org/licenses/mit-license.php).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}